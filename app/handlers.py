from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

from datetime import date
from dateutil.relativedelta import relativedelta

from app import texts
from app import keyboards as kb
import app.database.reqests as rq


router = Router()


@router.message(CommandStart())
async def start_command(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer(text=texts.welcome_message, reply_markup=kb.tell_more_button())

@router.callback_query(lambda callback: callback.data == "tell_me_more")
async def tell_me_more(callback: CallbackQuery):
    await callback.message.answer(texts.tell_me_more_message, reply_markup=kb.start_training_button())
    await callback.answer()

@router.callback_query(lambda callback: callback.data == "start_training")
async def set_target(callback: CallbackQuery):
    await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É', reply_markup=kb.set_target_buttons)
    await callback.answer()


@router.message(F.text == "–°–±—Ä–æ—Å –≤–µ—Å–∞")
@router.message(F.text == "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ")
@router.message(F.text == "–ë—ã—Ç—å –≤ —Ñ–æ—Ä–º–µ")
async def set_programm_target(message: Message):
    await rq.set_target(message.from_user.id, message.text)
    await message.answer(text=texts.first_motivation, reply_markup=kb.set_training_programm_time_buttons)

@router.message(F.text == "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è 1 –º–µ—Å—è—Ü")
@router.message(F.text == "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è 2 –º–µ—Å—è—Ü–∞")
@router.message(F.text == "–ó–∞–Ω–∏–º–∞—Ç—å—Å—è 3 –º–µ—Å—è—Ü–∞")
async def set_training_programm_time(message: Message):
    interval = message.text.split()[1]
    await rq.set_start_time(message.from_user.id, date.today())
    await rq.set_end_time(message.from_user.id, date.today()+relativedelta(months=int(interval)))
    await rq.set_training_time(message.from_user.id, interval)
    await message.answer(text='–ù–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –≤–∞—à–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞?', reply_markup=kb.set_lvl_buttons)

@router.message(F.text == '–ù–æ–≤–∏—á–æ–∫')
@router.message(F.text == '–°—Ä–µ–¥–Ω—è—è')
@router.message(F.text == '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π')
async def set_programm_lvl(message: Message):
    await rq.set_lvl(message.from_user.id, message.text)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –ø–ª–∞–Ω –∑–∞–Ω—è—Ç–∏–π –≥–æ—Ç–æ–≤', reply_markup=kb.main_buttons)

@router.message(F.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    info = await rq.get_info(message.from_user.id)
    await message.answer(text = f'<b>–¶–µ–ª—å:</b> {info.target}\n<b>–£—Ä–æ–≤–µ–Ω—å:</b> {info.lvl}\n<b>–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏–π:</b> {info.start_time}\n<b>–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏–π:</b> {info.end_time}',parse_mode="HTML")
    
@router.message(F.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=kb.change_programme_button())

@router.message(F.text == 'üìö–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π')
async def knowledge_base(message: Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å', reply_markup=kb.database_button)

# @router.message(F.text == '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
# async def today_programm(message: Message):
#     await message.answer_animation(animation='app/squats-exercise.gif')